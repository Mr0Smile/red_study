import 'katex/dist/katex.min.css';
declare const _default: import("vue-demi").DefineComponent<{
    fontsize: {
        type: NumberConstructor;
        default: number;
    };
    expression: {
        type: StringConstructor;
        required: true;
    };
    displayMode: {
        type: BooleanConstructor;
        default: boolean;
    };
    throwOnError: {
        type: BooleanConstructor;
        default: boolean;
    };
    errorColor: {
        type: StringConstructor;
        default: undefined;
    };
    minRuleThickness: {
        type: NumberConstructor;
        default: number;
    };
    macros: {
        type: ObjectConstructor;
        default: undefined;
    };
    colorIsTextColor: {
        type: BooleanConstructor;
        default: undefined;
    };
    maxSize: {
        type: NumberConstructor;
        default: undefined;
    };
    maxExpand: {
        type: NumberConstructor;
        default: undefined;
    };
    allowedProtocols: {
        type: ArrayConstructor;
        default: undefined;
    };
    strict: {
        type: (StringConstructor | BooleanConstructor | FunctionConstructor)[];
        default: undefined;
    };
}, {
    html: import("vue-demi").ComputedRef<string>;
}, unknown, {}, {}, import("vue-demi").ComponentOptionsMixin, import("vue-demi").ComponentOptionsMixin, Record<string, any>, string, import("vue-demi").VNodeProps & import("vue-demi").AllowedComponentProps & import("vue-demi").ComponentCustomProps, Readonly<{
    fontsize: number;
    expression: string;
    displayMode: boolean;
    throwOnError: boolean;
    errorColor: string;
    minRuleThickness: number;
    macros: Record<string, any>;
    colorIsTextColor: boolean;
    maxSize: number;
    maxExpand: number;
    allowedProtocols: unknown[];
    strict: string | boolean | Function;
} & {}>, {
    fontsize: number;
    displayMode: boolean;
    throwOnError: boolean;
    errorColor: string;
    minRuleThickness: number;
    macros: Record<string, any>;
    colorIsTextColor: boolean;
    maxSize: number;
    maxExpand: number;
    allowedProtocols: unknown[];
    strict: string | boolean | Function;
}>;
export default _default;
